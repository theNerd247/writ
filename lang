Terms:

Notes:

* completely type infered.
* turing incomplete
* Strings in this language do not have quotes
around them. This is because strings are the center piece of what users would
write and so it would be annoying to have to keep track of quotes all the time.
* Variables are limited to their nearest lambda otherwise
  it is globally scoped.
* Users already familiar with markdown should be easily able to pick up the
  language.

Key features:

* allow blending of content with logic definitions.
* template lambdas aka pattern lambdas

For example: 

```
{ x =
* adf 
* adf
* asdf
}
```
would define: 

```
let x = [ "adf" "adf" "asdf" ]; in bullets x
```

This allows one to quickly capture the logic of some
content without worrying about the rendering etc.

Abstract Syntax Tree
====================

E 
  = x
  | \x : T.E
  | \... : T'.E
  | E E'
  | letexpr x E
  | number
  | bool
  | string

T 
  = TODO: define type language that enforces a non-turring completeness.

Parser Notes
============

* Parse `${ }` statements as code - everything else
is a string and can be passed to the 

1. Parse code `Parser (Expr Text)`
1. Parse blocks `Parser (Expr (Parser (Blocks Text)))`
1. Parse else `Parser (Expr (Parser (Blocks (Parser Inlines))))`

  do

parseExprs >>= parseBlocks >>= parseInlines

parseExprs   :: Text -> ParserT Expr Text
parseBlocks  :: Text -> ParserT Expr Text
parseInlines :: Text -> ParserT Expr ()


Syntax
======

<contents> = <content><contents>

<content> = <string> | <p-expression>

<p-expression> = {<expression>}

<expression>
  = <variable> 
  | <lambdas> 
  | <letexpr>
  | <application>
  | <quoted-content>
  | <primitive>
  | (<expression>)
  | <comment>

<comment> = ^| <chars>

<primitive> 
  = <bools>
  | <strings>
  | <numbers>

<pattern-decl> = <lambda-decl><patterned-content>

<variable> = <varchars>

<varchars> = <varchar><varchars>

<varchar> = a - z | A - Z | _

<lambdas>
  = <lambda>
  | <pattern-lambda>

<pattern-lambda> = ... => <contents>

<lambda> = <variable> [<variable-decls>] => <contents>

<variable-decls> = <variable> <variable-decls>

<letexpr> = {<variable> = <contents>}

<application>
  = <contents> $ <contents>
  | <contents> $<variable>$ <contents>

<strings> 
  = <string>
  | <string> <> <string>
  | |<string>|

<string> = <char><chars>

<char> = any valid unicode character

<bools>
  = <bool>
  | <bool> && <bool>
  | <bool> || <bool>
  | !<bool>

<bool> = true | false

<numbers> 
  = <number>
  | <number> + <number>
  | <number> - <number>
  | <number> * <number>
  | <number> / <number>
  | <number> ^ <number>

<number> = <pos-number> | -<pos-number>

<pos-number> = <digits>.<digits> | <digits>

<digits> = <digit> | <digit><digits>

<digit> = 0 | 1 | ... | 9
